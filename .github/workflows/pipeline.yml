name: Pipeline CI/CD

on:
  workflow_dispatch:
    inputs:
      folder:
        description: 'Imagem Docker que deseja publicar no Registry'
        required: true
        type: choice
        options:
          - terraform
      tag:
        description: 'Tag para a imagem Docker (padrão: latest)'
        required: false
        default: 'latest'
        type: string

jobs:
  Build:
    runs-on: ubuntu-latest
    container:
      image: docker:latest
      # credentials: # Removido, pois não é necessário para o container Docker Hub padrão
      #   username: ${{ secrets.AZURE_USER }}
      #   password: ${{ secrets.AZURE_PASSWORD }}
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Construir Imagem Docker
        run: |
          docker build -t devopseasybr/${{ inputs.folder }}:${{ inputs.tag }} -f ${{ inputs.folder }}/Dockerfile ${{ inputs.folder }}

      - name: Salvar Imagem em Tarball
        run: |
          docker save devopseasybr/${{ inputs.folder }}:${{ inputs.tag }} -o ${{ inputs.folder }}.tar
          chmod 644 ${{ inputs.folder }}.tar # Garante permissões de leitura

      - name: Remover Imagem Local (para economizar espaço/evitar conflitos)
        run: |
          docker rmi devopseasybr/${{ inputs.folder }}:${{ inputs.tag }}

      - name: Upload de Artefato (Imagem Tarball)
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-tarball # Nome do artefato deve ser consistente
          path: ${{ inputs.folder }}.tar
          # retention-days: 1 # Opcional: define por quanto tempo o artefato fica disponível

  Test:
    runs-on: ubuntu-latest
    needs: [Build] # Depende do job 'Build'
    container:
      image: devopseasybr/trivy:0.61.0
      # credentials: # Removido, pois não é necessário para o container Trivy
      #   username: ${{ secrets.AZURE_USER }}
      #   password: ${{ secrets.AZURE_PASSWORD }}
    steps:
      - name: Download de Artefato (Imagem Tarball)
        uses: actions/download-artifact@v4
        with:
          name: docker-image-tarball # Deve corresponder EXATAMENTE ao nome no upload
          # No mesmo workflow, NÃO PRECISA de repository nem run-id!
          # repository: devopseasybr/dockerimage # REMOVER
          # run-id: 15449580345 # REMOVER

      - name: Carregar Imagem do Tarball
        run: |
          docker image load -i ${{ inputs.folder }}.tar

      - name: Executar Scan de Segurança com Trivy
        run: |
          trivy image --input devopseasybr/${{ inputs.folder }}:${{ inputs.tag }}
          # Se precisar de template ou outras opções do Trivy, adicione aqui:
          # trivy image -f template -t "@/home/trivy/template.tpl" -o report.html --exit-code 1 --severity CRITICAL,HIGH --input devopseasybr/${{ inputs.folder }}:${{ inputs.tag }}

      - name: Remover Imagem Local (após o teste)
        run: |
          docker rmi devopseasybr/${{ inputs.folder }}:${{ inputs.tag }}

  Deploy:
    runs-on: ubuntu-latest
    needs: [Test] # Depende do job 'Test'
    container:
      image: docker:latest
      # credentials: # Não é necessário aqui, pois o 'docker login' lida com isso.
      #   username: ${{ secrets.USER }}
      #   password: ${{ secrets.PASSWORD }}
    steps:
      - name: Download de Artefato (Imagem Tarball)
        uses: actions/download-artifact@v4
        with:
          name: docker-image-tarball # Deve corresponder EXATAMENTE ao nome no upload
          # No mesmo workflow, NÃO PRECISA de repository nem run-id!
          # repository: devopseasybr/dockerimage # REMOVER
          # run-id: 15449580345 # REMOVER

      - name: Carregar Imagem do Tarball
        run: |
          docker image load -i ${{ inputs.folder }}.tar

      - name: Login no Azure Container Registry
        run: |
          # Use o echo para passar a senha de forma segura via stdin
          echo "${{ secrets.PASSWORD }}" | docker login ${{ secrets.REGISTRY }} --username ${{ secrets.USER }} --password-stdin

      - name: Publicar Imagem no Registry
        run: |
          # Primeiro, tagar a imagem com o nome do registry de destino
          docker tag devopseasybr/${{ inputs.folder }}:${{ inputs.tag }} ${{ secrets.REGISTRY }}/devops/${{ inputs.folder }}:${{ inputs.tag }}
          # Depois, fazer o push
          docker push ${{ secrets.REGISTRY }}/devops/${{ inputs.folder }}:${{ inputs.tag }}

      - name: Remover Imagem Local (após o deploy)
        run: |
          docker rmi ${{ secrets.REGISTRY }}/devops/${{ inputs.folder }}:${{ inputs.tag }}
